#include<iostream>
#include<algorithm>

using namespace std;

int value[1000],father[1000],haffTree[10000];
int length,n,number[100],maxium = 0;

bool isRoot(int temp,int& index)
{
	for(int i = 0;i<length;++ i)
	{
		if(temp == value[i])
			if(father[i] == -1)
			{	
				index = i;
				return true;
			}
	}
	return false;
}

void getValue()
{
	int temp = 0;
	sort(number,number + n);
	while(n>1)
	{
		int root_number = 2,index1 = -1,index2 = -1; 
		if(isRoot(number[0],index1))
			--root_number;
		if(isRoot(number[1],index2)&&number[0] != number[1])
			--root_number;
		temp = temp + root_number;
		value[temp] = number[1] + number[0];
		father[temp] = -1;
		if(root_number == 0)
		{
			father[index1] = temp;
			father[index2] = temp;
		}
		if(root_number == 1)
		{
			if(index1 == -1)              //index1没被修改，所以是叶子
			{
				value[temp - 1] = number[0];
				father[temp-1] = temp;
				father[index2] = temp;
			}
			else
			{
				value[temp - 1] = number[1];
				father[temp-1] = temp;
				father[index1] = temp;
			}
		}
		if(root_number == 2)
		{
			value[temp - 1] = number[1];
			value[temp - 2] = number[0];
			father[temp-1] = temp;
			father[temp - 2] = temp;
		}
		number[0] = value[temp];
		number[1] = 1000000;
		temp = temp + 1;
		sort(number,number + n);
		n--;
	}
}

void getTree(int pos,int point)
{
	int switch1 = 0;
	maxium = maxium>pos? maxium:pos;
	for(int i = 0;i<length;++ i)
	{
		if(father[i] == point)
		{
			point = i;
			father[i] = -1;
			switch1 = 1;
			break;
		}
	}
	if(switch1 == 0) return;
	haffTree[pos] = value[point];
	getTree(2*pos + 1,point);
	getTree(2*pos + 2,point);
}

int main()
{
	cin>>n;
	length = 2*n-1;
	for(int i = 0;i<n;++ i)
		cin>>number[i];
	getValue();
	for(int i = 0;i<length;++ i)
		cout<<value[i]<<"   "<<father[i]<<endl;
	getTree(0,-1);
	for(int i = 0;i<=maxium;++ i)
		if(haffTree[i] != 0) cout<<haffTree[i];
}